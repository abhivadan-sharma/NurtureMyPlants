import { Router, Request, Response } from 'express';
import PDFDocument from 'pdfkit';
import { pdfGenerationLimiter } from '../middleware/rateLimiting';

const router = Router();

interface GeneratePdfRequest {
  plantData: {
    identification: {
      commonName: string;
      scientificName: string;
      confidence: string;
    };
    carePlan: any;
  };
  sessionId: string;
}

router.post('/generate-pdf', pdfGenerationLimiter, async (req: Request, res: Response) => {
  try {
    const { plantData, sessionId }: GeneratePdfRequest = req.body;

    if (!plantData?.identification?.commonName) {
      return res.status(400).json({ error: 'Plant data is required' });
    }

    console.log(`📄 Generating PDF for ${plantData.identification.commonName}`);

    // Create PDF document
    const doc = new PDFDocument({
      margin: 50,
      size: 'A4'
    });

    // Set response headers
    res.setHeader('Content-Type', 'application/pdf');
    res.setHeader('Content-Disposition', `attachment; filename="${plantData.identification.commonName.replace(/[^a-zA-Z0-9]/g, '_')}_care_guide.pdf"`);

    // Pipe PDF to response
    doc.pipe(res);

    // Header
    doc.fontSize(24)
       .fillColor('#22c55e')
       .text('🌱 NurtureMyPlants.com', 50, 50);
    
    doc.fontSize(20)
       .fillColor('#000')
       .text(`Care Guide for ${plantData.identification.commonName}`, 50, 100);

    if (plantData.identification.scientificName) {
      doc.fontSize(14)
         .fillColor('#666')
         .text(`Scientific name: ${plantData.identification.scientificName}`, 50, 130);
    }

    doc.fontSize(12)
       .fillColor('#999')
       .text(`Generated on ${new Date().toLocaleDateString()}`, 50, 155);

    let yPosition = 200;

    // Care plan sections
    const sections = [
      { title: '💧 Watering', data: plantData.carePlan.watering },
      { title: '☀️ Light Requirements', data: plantData.carePlan.light },
      { title: '🌡️ Temperature & Humidity', data: { temperature: plantData.carePlan.temperature, humidity: plantData.carePlan.humidity } },
      { title: '🌱 Soil Requirements', data: plantData.carePlan.soil },
      { title: '🌿 Fertilizing', data: plantData.carePlan.fertilizing },
      { title: '✂️ Maintenance', data: plantData.carePlan.maintenance }
    ];

    sections.forEach(section => {
      // Check if we need a new page
      if (yPosition > 700) {
        doc.addPage();
        yPosition = 50;
      }

      // Section title
      doc.fontSize(16)
         .fillColor('#22c55e')
         .text(section.title, 50, yPosition);
      
      yPosition += 25;

      // Section content
      doc.fontSize(12)
         .fillColor('#000');

      Object.entries(section.data).forEach(([key, value]) => {
        if (typeof value === 'string') {
          doc.text(`${key.charAt(0).toUpperCase() + key.slice(1)}: ${value}`, 70, yPosition);
          yPosition += 20;
        } else if (typeof value === 'object' && value !== null) {
          Object.entries(value).forEach(([subKey, subValue]) => {
            doc.text(`${subKey.charAt(0).toUpperCase() + subKey.slice(1)}: ${subValue}`, 70, yPosition);
            yPosition += 20;
          });
        }
      });

      yPosition += 15;
    });

    // Common Problems section
    if (plantData.carePlan.commonProblems && plantData.carePlan.commonProblems.length > 0) {
      if (yPosition > 650) {
        doc.addPage();
        yPosition = 50;
      }

      doc.fontSize(16)
         .fillColor('#22c55e')
         .text('🚨 Common Problems & Solutions', 50, yPosition);
      
      yPosition += 25;

      plantData.carePlan.commonProblems.forEach((problem: any) => {
        if (yPosition > 700) {
          doc.addPage();
          yPosition = 50;
        }

        doc.fontSize(12)
           .fillColor('#d97706')
           .text(`Problem: ${problem.issue}`, 70, yPosition);
        
        yPosition += 15;

        doc.fillColor('#059669')
           .text(`Solution: ${problem.solution}`, 70, yPosition);
        
        yPosition += 25;
      });
    }

    // Tips section
    if (plantData.carePlan.tips && plantData.carePlan.tips.length > 0) {
      if (yPosition > 650) {
        doc.addPage();
        yPosition = 50;
      }

      doc.fontSize(16)
         .fillColor('#22c55e')
         .text('💡 Pro Tips', 50, yPosition);
      
      yPosition += 25;

      plantData.carePlan.tips.forEach((tip: string, index: number) => {
        if (yPosition > 720) {
          doc.addPage();
          yPosition = 50;
        }

        doc.fontSize(12)
           .fillColor('#000')
           .text(`• ${tip}`, 70, yPosition);
        
        yPosition += 20;
      });
    }

    // Footer
    doc.fontSize(10)
       .fillColor('#999')
       .text('Generated by NurtureMyPlants.com - Your AI Plant Care Assistant', 50, 750);

    // Finalize PDF
    doc.end();

    console.log(`✅ PDF generated successfully for session: ${sessionId}`);

  } catch (error) {
    console.error('PDF generation error:', error);
    res.status(500).json({ error: 'Failed to generate PDF' });
  }
});

export { router as generatePdfRouter };